{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "map",
    "type": "registry:ui",
    "title": "Map",
    "author": "Hin",
    "description": "A map component.",
    "dependencies": ["leaflet", "react-leaflet", "next-themes"],
    "devDependencies": ["@types/leaflet"],
    "registryDependencies": ["button", "dropdown-menu"],
    "files": [
        {
            "path": "registry/new-york-v4/ui/map.tsx",
            "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport {\n    DropdownMenu,\n    DropdownMenuCheckboxItem,\n    DropdownMenuContent,\n    DropdownMenuLabel,\n    DropdownMenuRadioGroup,\n    DropdownMenuRadioItem,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger,\n} from \"@/registry/new-york-v4/ui/dropdown-menu\"\nimport type { CheckboxItem } from \"@radix-ui/react-dropdown-menu\"\nimport type {\n    DivIconOptions,\n    ErrorEvent,\n    LatLngExpression,\n    LocateOptions,\n    LocationEvent,\n} from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport {\n    LayersIcon,\n    LoaderCircleIcon,\n    MapPinIcon,\n    MinusIcon,\n    NavigationIcon,\n    PlusIcon,\n} from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\nimport dynamic from \"next/dynamic\"\nimport {\n    createContext,\n    useContext,\n    useEffect,\n    useRef,\n    useState,\n    type ReactNode,\n} from \"react\"\nimport { renderToString } from \"react-dom/server\"\nimport type {\n    CircleMarkerProps,\n    CircleProps,\n    LayerGroupProps,\n    MapContainerProps,\n    MarkerProps,\n    PolygonProps,\n    PolylineProps,\n    PopupProps,\n    RectangleProps,\n    TileLayerProps,\n    TooltipProps,\n} from \"react-leaflet\"\nimport { useMap, useMapEvents } from \"react-leaflet\"\n\nconst LeafletMapContainer = dynamic(\n    async () => (await import(\"react-leaflet\")).MapContainer,\n    {\n        ssr: false,\n    }\n)\nconst LeafletTileLayer = dynamic(\n    async () => (await import(\"react-leaflet\")).TileLayer,\n    { ssr: false }\n)\nconst LeafletMarker = dynamic(\n    async () => (await import(\"react-leaflet\")).Marker,\n    {\n        ssr: false,\n    }\n)\nconst LeafletPopup = dynamic(\n    async () => (await import(\"react-leaflet\")).Popup,\n    {\n        ssr: false,\n    }\n)\nconst LeafletTooltip = dynamic(\n    async () => (await import(\"react-leaflet\")).Tooltip,\n    {\n        ssr: false,\n    }\n)\nconst LeafletCircle = dynamic(\n    async () => (await import(\"react-leaflet\")).Circle,\n    {\n        ssr: false,\n    }\n)\nconst LeafletCircleMarker = dynamic(\n    async () => (await import(\"react-leaflet\")).CircleMarker,\n    {\n        ssr: false,\n    }\n)\nconst LeafletPolyline = dynamic(\n    async () => (await import(\"react-leaflet\")).Polyline,\n    {\n        ssr: false,\n    }\n)\nconst LeafletPolygon = dynamic(\n    async () => (await import(\"react-leaflet\")).Polygon,\n    {\n        ssr: false,\n    }\n)\nconst LeafletRectangle = dynamic(\n    async () => (await import(\"react-leaflet\")).Rectangle,\n    {\n        ssr: false,\n    }\n)\nconst LeafletLayerGroup = dynamic(\n    async () => (await import(\"react-leaflet\")).LayerGroup,\n    {\n        ssr: false,\n    }\n)\n\nfunction Map({\n    zoom = 15,\n    className,\n    ...props\n}: MapContainerProps & { center: LatLngExpression }) {\n    return (\n        <LeafletMapContainer\n            zoom={zoom}\n            attributionControl={false}\n            zoomControl={false}\n            className={cn(\"size-full min-h-96 flex-1 rounded-md\", className)}\n            {...props}\n        />\n    )\n}\n\ninterface MapTileLayerOption {\n    name: string\n    url: string\n    attribution?: string\n}\n\ninterface MapLayerGroupOption\n    extends Pick<React.ComponentProps<typeof CheckboxItem>, \"disabled\"> {\n    name: string\n}\n\ninterface MapLayersContextType {\n    registerTileLayer: (layer: MapTileLayerOption) => void\n    tileLayers: MapTileLayerOption[]\n    selectedTileLayer: string\n    setSelectedTileLayer: (name: string) => void\n\n    registerLayerGroup: (layer: MapLayerGroupOption) => void\n    layerGroups: MapLayerGroupOption[]\n    activeLayerGroups: string[]\n    setActiveLayerGroups: (names: string[]) => void\n}\n\nconst MapLayersContext = createContext<MapLayersContextType | null>(null)\n\nfunction useMapLayersContext() {\n    return useContext(MapLayersContext)\n}\n\nfunction MapTileLayer({\n    name = \"Default\",\n    url,\n    attribution,\n    darkUrl,\n    darkAttribution,\n    ...props\n}: Partial<TileLayerProps> & {\n    name?: string\n    darkUrl?: string\n    darkAttribution?: string\n}) {\n    const context = useContext(MapLayersContext)\n    const DEFAULT_URL =\n        \"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n    const DEFAULT_DARK_URL =\n        \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png\"\n\n    const { resolvedTheme } = useTheme()\n    const resolvedUrl =\n        resolvedTheme === \"dark\"\n            ? (darkUrl ?? url ?? DEFAULT_DARK_URL)\n            : (url ?? DEFAULT_URL)\n    const resolvedAttribution =\n        resolvedTheme === \"dark\" && darkAttribution\n            ? darkAttribution\n            : (attribution ??\n              '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>')\n\n    useEffect(() => {\n        if (context) {\n            context.registerTileLayer({\n                name,\n                url: resolvedUrl,\n                attribution: resolvedAttribution,\n            })\n        }\n    }, [context, name, url, attribution])\n\n    if (context && context.selectedTileLayer !== name) {\n        return null\n    }\n\n    return (\n        <LeafletTileLayer\n            url={resolvedUrl}\n            attribution={resolvedAttribution}\n            {...props}\n        />\n    )\n}\n\nfunction MapLayerGroup({\n    name,\n    disabled,\n    ...props\n}: LayerGroupProps & MapLayerGroupOption) {\n    const context = useMapLayersContext()\n\n    useEffect(() => {\n        if (context) {\n            context.registerLayerGroup({\n                name,\n                disabled,\n            })\n        }\n    }, [context, name, disabled])\n\n    if (context && !context.activeLayerGroups.includes(name)) {\n        return null\n    }\n\n    return <LeafletLayerGroup {...props} />\n}\n\nfunction MapLayers({\n    defaultTileLayer,\n    defaultLayerGroups = [],\n    ...props\n}: Omit<React.ComponentProps<typeof MapLayersContext.Provider>, \"value\"> & {\n    defaultTileLayer?: string\n    defaultLayerGroups?: string[]\n}) {\n    const [tileLayers, setTileLayers] = useState<MapTileLayerOption[]>([])\n    const [selectedTileLayer, setSelectedTileLayer] = useState<string>(\n        defaultTileLayer || \"\"\n    )\n    const [layerGroups, setLayerGroups] = useState<MapLayerGroupOption[]>([])\n    const [activeLayerGroups, setActiveLayerGroups] =\n        useState<string[]>(defaultLayerGroups)\n\n    function registerTileLayer(tileLayer: MapTileLayerOption) {\n        setTileLayers((prevTileLayers) => {\n            if (prevTileLayers.some((layer) => layer.name === tileLayer.name)) {\n                return prevTileLayers\n            }\n            return [...prevTileLayers, tileLayer]\n        })\n    }\n\n    function registerLayerGroup(layerGroup: MapLayerGroupOption) {\n        setLayerGroups((prevLayerGroups) => {\n            if (\n                prevLayerGroups.some((group) => group.name === layerGroup.name)\n            ) {\n                return prevLayerGroups\n            }\n            return [...prevLayerGroups, layerGroup]\n        })\n    }\n\n    useEffect(() => {\n        // Error: Invalid defaultValue\n        if (\n            defaultTileLayer &&\n            tileLayers.length > 0 &&\n            !tileLayers.some((tileLayer) => tileLayer.name === defaultTileLayer)\n        ) {\n            throw new Error(\n                `Invalid defaultTileLayer \"${defaultTileLayer}\" provided to MapLayers. It must match a MapTileLayer's name prop.`\n            )\n        }\n\n        // Set initial selected tile layer\n        if (tileLayers.length > 0 && !selectedTileLayer) {\n            const validDefaultValue =\n                defaultTileLayer &&\n                tileLayers.some((layer) => layer.name === defaultTileLayer)\n                    ? defaultTileLayer\n                    : tileLayers[0].name\n            setSelectedTileLayer(validDefaultValue)\n        }\n\n        // Error: Invalid defaultActiveLayerGroups\n        if (\n            defaultLayerGroups.length > 0 &&\n            layerGroups.length > 0 &&\n            defaultLayerGroups.some(\n                (name) => !layerGroups.some((group) => group.name === name)\n            )\n        ) {\n            throw new Error(\n                `Invalid defaultLayerGroups value provided to MapLayers. All names must match a MapLayerGroup's name prop.`\n            )\n        }\n    }, [\n        tileLayers,\n        defaultTileLayer,\n        selectedTileLayer,\n        layerGroups,\n        defaultLayerGroups,\n    ])\n\n    return (\n        <MapLayersContext.Provider\n            value={{\n                registerTileLayer,\n                tileLayers,\n                selectedTileLayer,\n                setSelectedTileLayer,\n                registerLayerGroup,\n                layerGroups,\n                activeLayerGroups,\n                setActiveLayerGroups,\n            }}\n            {...props}\n        />\n    )\n}\n\nfunction MapLayersControl({\n    tileLayersLabel = \"Map Type\",\n    layerGroupsLabel = \"Layers\",\n    className,\n    ...props\n}: React.ComponentProps<\"button\"> & {\n    tileLayersLabel?: string\n    layerGroupsLabel?: string\n}) {\n    const layersContext = useMapLayersContext()\n    if (!layersContext) {\n        throw new Error(\"MapLayersControl must be used within MapLayers\")\n    }\n\n    const {\n        tileLayers,\n        selectedTileLayer,\n        setSelectedTileLayer,\n        layerGroups,\n        activeLayerGroups,\n        setActiveLayerGroups,\n    } = layersContext\n\n    if (tileLayers.length === 0 && layerGroups.length === 0) {\n        return null\n    }\n\n    function handleLayerGroupToggle(name: string, checked: boolean) {\n        setActiveLayerGroups(\n            checked\n                ? [...activeLayerGroups, name]\n                : activeLayerGroups.filter((groupName) => groupName !== name)\n        )\n    }\n\n    const showTileLayersDropdown = tileLayers.length > 1\n    const showLayerGroupsDropdown = layerGroups.length > 0\n\n    if (!showTileLayersDropdown && !showLayerGroupsDropdown) {\n        return null\n    }\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button\n                    type=\"button\"\n                    variant=\"secondary\"\n                    size=\"icon\"\n                    aria-label=\"Select layers\"\n                    title=\"Select layers\"\n                    className={cn(\"absolute top-1 right-1 z-1000\", className)}\n                    {...props}>\n                    <LayersIcon />\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"z-1000\">\n                {showTileLayersDropdown && (\n                    <>\n                        <DropdownMenuLabel>{tileLayersLabel}</DropdownMenuLabel>\n                        <DropdownMenuRadioGroup\n                            value={selectedTileLayer}\n                            onValueChange={setSelectedTileLayer}>\n                            {tileLayers.map((tileLayer) => (\n                                <DropdownMenuRadioItem\n                                    key={tileLayer.name}\n                                    value={tileLayer.name}>\n                                    {tileLayer.name}\n                                </DropdownMenuRadioItem>\n                            ))}\n                        </DropdownMenuRadioGroup>\n                    </>\n                )}\n                {showTileLayersDropdown && showLayerGroupsDropdown && (\n                    <DropdownMenuSeparator />\n                )}\n                {showLayerGroupsDropdown && (\n                    <>\n                        <DropdownMenuLabel>\n                            {layerGroupsLabel}\n                        </DropdownMenuLabel>\n                        {layerGroups.map((layerGroup) => (\n                            <DropdownMenuCheckboxItem\n                                key={layerGroup.name}\n                                checked={activeLayerGroups.includes(\n                                    layerGroup.name\n                                )}\n                                disabled={layerGroup.disabled}\n                                onCheckedChange={(checked) =>\n                                    handleLayerGroupToggle(\n                                        layerGroup.name,\n                                        checked\n                                    )\n                                }>\n                                {layerGroup.name}\n                            </DropdownMenuCheckboxItem>\n                        ))}\n                    </>\n                )}\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n\nfunction MapMarker({\n    icon = <MapPinIcon className=\"size-6\" />,\n    bgPos,\n    iconAnchor = [12, 12],\n    popupAnchor,\n    tooltipAnchor,\n    ...props\n}: Omit<MarkerProps, \"icon\"> &\n    Pick<\n        DivIconOptions,\n        \"bgPos\" | \"iconAnchor\" | \"popupAnchor\" | \"tooltipAnchor\"\n    > & {\n        icon?: ReactNode\n    }) {\n    const L = useLeaflet()\n    if (!L) return null\n\n    return (\n        <LeafletMarker\n            icon={L.divIcon({\n                html: renderToString(icon),\n                iconAnchor,\n                ...(bgPos ? { bgPos } : {}),\n                ...(popupAnchor ? { popupAnchor } : {}),\n                ...(tooltipAnchor ? { tooltipAnchor } : {}),\n            })}\n            riseOnHover\n            {...props}\n        />\n    )\n}\n\nfunction MapCircle({ className, ...props }: CircleProps) {\n    return (\n        <LeafletCircle\n            className={cn(\n                \"fill-foreground stroke-foreground stroke-2\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapCircleMarker({ className, ...props }: CircleMarkerProps) {\n    return (\n        <LeafletCircleMarker\n            className={cn(\n                \"fill-foreground stroke-foreground stroke-2\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapPolyline({ className, ...props }: PolylineProps) {\n    return (\n        <LeafletPolyline\n            className={cn(\n                \"fill-foreground stroke-foreground stroke-2\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapPolygon({ className, ...props }: PolygonProps) {\n    return (\n        <LeafletPolygon\n            className={cn(\n                \"fill-foreground stroke-foreground stroke-2\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapRectangle({ className, ...props }: RectangleProps) {\n    return (\n        <LeafletRectangle\n            className={cn(\n                \"fill-foreground stroke-foreground stroke-2\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapPopup({ className, ...props }: PopupProps) {\n    return (\n        <LeafletPopup\n            className={cn(\n                \"bg-popover text-popover-foreground animate-in fade-out-0 fade-in-0 zoom-out-95 zoom-in-95 slide-in-from-bottom-2 z-50 w-72 rounded-md border p-4 font-sans shadow-md outline-hidden\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapTooltip({\n    className,\n    children,\n    direction = \"top\",\n    ...props\n}: TooltipProps & { direction?: \"top\" | \"right\" | \"bottom\" | \"left\" }) {\n    const ARROW_POSITION_CLASSES = {\n        top: \"bottom-0.5 left-1/2 -translate-x-1/2 translate-y-1/2\",\n        bottom: \"top-0.5 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n        left: \"right-0.5 top-1/2 translate-x-1/2 -translate-y-1/2\",\n        right: \"left-0.5 top-1/2 -translate-x-1/2 -translate-y-1/2\",\n    }\n\n    return (\n        <LeafletTooltip\n            className={cn(\n                \"animate-in fade-in-0 zoom-in-95 fade-out-0 zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 w-fit text-xs text-balance transition-opacity\",\n                className\n            )}\n            direction={direction}\n            data-side={direction}\n            opacity={1}\n            {...props}>\n            {children}\n            <div\n                className={cn(\n                    \"bg-foreground fill-foreground absolute z-50 size-2.5 rotate-45 rounded-[2px]\",\n                    ARROW_POSITION_CLASSES[direction]\n                )}\n            />\n        </LeafletTooltip>\n    )\n}\n\nfunction MapZoomControl({ className, ...props }: React.ComponentProps<\"div\">) {\n    const map = useMap()\n    const [zoomLevel, setZoomLevel] = useState(map.getZoom())\n\n    useMapEvents({\n        zoomend: () => {\n            setZoomLevel(map.getZoom())\n        },\n    })\n\n    return (\n        <div\n            className={cn(\n                \"absolute top-1 left-1 z-1000 grid size-fit gap-1\",\n                className\n            )}\n            {...props}>\n            <Button\n                type=\"button\"\n                size=\"icon\"\n                variant=\"secondary\"\n                aria-label=\"Zoom in\"\n                title=\"Zoom in\"\n                disabled={zoomLevel >= map.getMaxZoom()}\n                onClick={() => map.zoomIn()}>\n                <PlusIcon />\n            </Button>\n            <Button\n                type=\"button\"\n                size=\"icon\"\n                variant=\"secondary\"\n                aria-label=\"Zoom out\"\n                title=\"Zoom out\"\n                disabled={zoomLevel <= map.getMinZoom()}\n                onClick={() => map.zoomOut()}>\n                <MinusIcon />\n            </Button>\n        </div>\n    )\n}\n\nfunction MapLocatePulseIcon() {\n    return (\n        <div className=\"absolute -top-1 -right-1 flex size-3 rounded-full\">\n            <div className=\"bg-primary absolute inline-flex size-full animate-ping rounded-full opacity-75\" />\n            <div className=\"bg-primary relative inline-flex size-3 rounded-full\" />\n        </div>\n    )\n}\n\nfunction MapLocateControl({\n    className,\n    watch = false,\n    onLocationFound,\n    onLocationError,\n    ...props\n}: React.ComponentProps<\"button\"> &\n    Pick<LocateOptions, \"watch\"> & {\n        onLocationFound?: (location: LocationEvent) => void\n        onLocationError?: (error: ErrorEvent) => void\n    }) {\n    const map = useMap()\n    const [isLocating, setIsLocating] = useDebounceLoadingState(200)\n    const [position, setPosition] = useState<LatLngExpression | null>(null)\n\n    function startLocating() {\n        setIsLocating(true)\n        map.locate({ setView: true, maxZoom: map.getMaxZoom(), watch })\n        map.on(\"locationfound\", (location: LocationEvent) => {\n            setPosition(location.latlng)\n            setIsLocating(false)\n            onLocationFound?.(location)\n        })\n        map.on(\"locationerror\", (error: ErrorEvent) => {\n            setPosition(null)\n            setIsLocating(false)\n            onLocationError?.(error)\n        })\n    }\n\n    function stopLocating() {\n        map.stopLocate()\n        map.off(\"locationfound\")\n        map.off(\"locationerror\")\n        setPosition(null)\n        setIsLocating(false)\n    }\n\n    useEffect(() => {\n        return () => stopLocating()\n    }, [])\n\n    return (\n        <>\n            <Button\n                type=\"button\"\n                size=\"icon\"\n                variant={position ? \"default\" : \"secondary\"}\n                onClick={position ? stopLocating : startLocating}\n                disabled={isLocating}\n                title={\n                    isLocating\n                        ? \"Locating...\"\n                        : position\n                          ? \"Stop tracking\"\n                          : \"Track location\"\n                }\n                aria-label={\n                    isLocating\n                        ? \"Locating...\"\n                        : position\n                          ? \"Stop location tracking\"\n                          : \"Start location tracking\"\n                }\n                className={cn(\"absolute right-1 bottom-1 z-1000\", className)}\n                {...props}>\n                {isLocating ? (\n                    <LoaderCircleIcon className=\"animate-spin\" />\n                ) : (\n                    <NavigationIcon />\n                )}\n            </Button>\n            {position && (\n                <MapMarker position={position} icon={<MapLocatePulseIcon />} />\n            )}\n        </>\n    )\n}\n\nfunction useLeaflet() {\n    const [L, setL] = useState<typeof import(\"leaflet\") | null>(null)\n\n    useEffect(() => {\n        if (L) return\n\n        if (typeof window !== \"undefined\") {\n            const leaflet = require(\"leaflet\")\n            setL(leaflet)\n        }\n    }, [L])\n\n    return L\n}\n\nfunction useDebounceLoadingState(delay = 200) {\n    const [isLoading, setIsLoading] = useState(false)\n    const [showLoading, setShowLoading] = useState(false)\n    const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n    useEffect(() => {\n        if (isLoading) {\n            timeoutRef.current = setTimeout(() => {\n                setShowLoading(true)\n            }, delay)\n        } else {\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current)\n                timeoutRef.current = null\n            }\n            setShowLoading(false)\n        }\n\n        return () => {\n            if (timeoutRef.current) {\n                clearTimeout(timeoutRef.current)\n            }\n        }\n    }, [isLoading, delay])\n\n    return [showLoading, setIsLoading] as const\n}\n\nexport {\n    Map,\n    MapCircle,\n    MapCircleMarker,\n    MapLayerGroup,\n    MapLayers,\n    MapLayersControl,\n    MapLocateControl,\n    MapMarker,\n    MapPolygon,\n    MapPolyline,\n    MapPopup,\n    MapRectangle,\n    MapTileLayer,\n    MapTooltip,\n    MapZoomControl,\n}\n",
            "type": "registry:ui"
        }
    ]
}
