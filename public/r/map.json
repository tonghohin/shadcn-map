{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "map",
    "type": "registry:ui",
    "dependencies": ["leaflet", "react-leaflet", "next-themes"],
    "devDependencies": ["@types/leaflet"],
    "registryDependencies": ["button", "skeleton"],
    "files": [
        {
            "path": "registry/new-york-v4/ui/map.tsx",
            "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york-v4/ui/button\"\nimport { Skeleton } from \"@/registry/new-york-v4/ui/skeleton\"\nimport type { DivIconOptions, LatLngExpression } from \"leaflet\"\nimport \"leaflet/dist/leaflet.css\"\nimport { LucideProps, MapPinIcon, MinusIcon, PlusIcon } from \"lucide-react\"\nimport { useTheme } from \"next-themes\"\nimport dynamic from \"next/dynamic\"\nimport { useEffect, useState, type ReactNode } from \"react\"\nimport { renderToString } from \"react-dom/server\"\nimport type {\n    CircleMarkerProps,\n    CircleProps,\n    MapContainerProps,\n    MarkerProps,\n    PolygonProps,\n    PolylineProps,\n    PopupProps,\n    RectangleProps,\n    TileLayerProps,\n} from \"react-leaflet\"\nimport { useMap } from \"react-leaflet\"\n\nconst MapContainer = dynamic(\n    async () => (await import(\"react-leaflet\")).MapContainer,\n    {\n        ssr: false,\n        loading: () => <Skeleton className=\"size-full\" />,\n    }\n)\nconst TileLayer = dynamic(\n    async () => (await import(\"react-leaflet\")).TileLayer,\n    { ssr: false }\n)\nconst Marker = dynamic(async () => (await import(\"react-leaflet\")).Marker, {\n    ssr: false,\n})\nconst Popup = dynamic(async () => (await import(\"react-leaflet\")).Popup, {\n    ssr: false,\n})\nconst Circle = dynamic(async () => (await import(\"react-leaflet\")).Circle, {\n    ssr: false,\n})\nconst CircleMarker = dynamic(\n    async () => (await import(\"react-leaflet\")).CircleMarker,\n    {\n        ssr: false,\n    }\n)\nconst Polyline = dynamic(async () => (await import(\"react-leaflet\")).Polyline, {\n    ssr: false,\n})\nconst Polygon = dynamic(async () => (await import(\"react-leaflet\")).Polygon, {\n    ssr: false,\n})\nconst Rectangle = dynamic(\n    async () => (await import(\"react-leaflet\")).Rectangle,\n    {\n        ssr: false,\n    }\n)\n\nfunction Map({\n    className,\n    ...props\n}: MapContainerProps & { center: LatLngExpression }) {\n    const INITIAL_ZOOM = 15\n\n    return (\n        <MapContainer\n            zoom={INITIAL_ZOOM}\n            attributionControl={false}\n            zoomControl={false}\n            className={cn(\"size-full flex-1 rounded-md\", className)}\n            {...props}\n        />\n    )\n}\n\nfunction MapTileLayer({ attribution, url, ...props }: Partial<TileLayerProps>) {\n    const { resolvedTheme } = useTheme()\n    const style = resolvedTheme === \"dark\" ? \"dark_all\" : \"light_all\"\n    const tileUrl = `https://{s}.basemaps.cartocdn.com/${style}/{z}/{x}/{y}.png`\n\n    return (\n        <TileLayer\n            attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n            url={tileUrl}\n            {...props}\n        />\n    )\n}\n\nfunction MapDefaultMarkerIcon({ ...props }: LucideProps) {\n    return <MapPinIcon className=\"size-6\" {...props} />\n}\n\nfunction MapMarker({\n    icon,\n    bgPos,\n    iconAnchor,\n    popupAnchor,\n    tooltipAnchor,\n    ...props\n}: Omit<MarkerProps, \"icon\"> &\n    Pick<\n        DivIconOptions,\n        \"bgPos\" | \"iconAnchor\" | \"popupAnchor\" | \"tooltipAnchor\"\n    > & {\n        icon?: ReactNode\n    }) {\n    const L = useLeaflet()\n    if (!L) return null\n\n    return (\n        <Marker\n            icon={L.divIcon({\n                html: renderToString(icon ?? <MapDefaultMarkerIcon />),\n                iconAnchor: [12, 12],\n                ...(bgPos ? { bgPos } : {}),\n                ...(iconAnchor ? { iconAnchor } : {}),\n                ...(popupAnchor ? { popupAnchor } : {}),\n                ...(tooltipAnchor ? { tooltipAnchor } : {}),\n            })}\n            riseOnHover\n            {...props}\n        />\n    )\n}\n\nfunction MapPopup({ className, ...props }: PopupProps) {\n    return (\n        <Popup\n            className={cn(\n                \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 font-sans shadow-md outline-hidden\",\n                className\n            )}\n            {...props}\n        />\n    )\n}\n\nfunction MapZoomControl({ className, ...props }: React.ComponentProps<\"div\">) {\n    const map = useMap()\n    const mapZoom = map.getZoom()\n    const mapMaxZoom = map.getMaxZoom()\n    const mapMinZoom = map.getMinZoom()\n\n    return (\n        <div\n            className={cn(\"absolute top-1 left-1 z-1000 grid gap-1\", className)}\n            {...props}>\n            <Button\n                type=\"button\"\n                size=\"icon\"\n                variant=\"outline\"\n                disabled={mapZoom >= mapMaxZoom}\n                onClick={() => map.zoomIn()}>\n                <PlusIcon />\n            </Button>\n            <Button\n                type=\"button\"\n                size=\"icon\"\n                variant=\"outline\"\n                disabled={mapZoom <= mapMinZoom}\n                onClick={() => map.zoomOut()}>\n                <MinusIcon />\n            </Button>\n        </div>\n    )\n}\n\nfunction MapCircle({ className, ...props }: CircleProps) {\n    return (\n        <Circle\n            className=\"fill-foreground stroke-foreground stroke-2\"\n            {...props}\n        />\n    )\n}\n\nfunction MapCircleMarker({ className, ...props }: CircleMarkerProps) {\n    return (\n        <CircleMarker\n            className=\"fill-foreground stroke-foreground stroke-2\"\n            {...props}\n        />\n    )\n}\n\nfunction MapPolyline({ className, ...props }: PolylineProps) {\n    return (\n        <Polyline\n            className=\"fill-foreground stroke-foreground stroke-2\"\n            {...props}\n        />\n    )\n}\n\nfunction MapPolygon({ className, ...props }: PolygonProps) {\n    return (\n        <Polygon\n            className=\"fill-foreground stroke-foreground stroke-2\"\n            {...props}\n        />\n    )\n}\n\nfunction MapRectangle({ className, ...props }: RectangleProps) {\n    return (\n        <Rectangle\n            className=\"fill-foreground stroke-foreground stroke-2\"\n            {...props}\n        />\n    )\n}\n\nfunction useLeaflet() {\n    const [L, setL] = useState<typeof import(\"leaflet\") | null>(null)\n\n    useEffect(() => {\n        if (L) return\n\n        if (typeof window !== \"undefined\") {\n            const leaflet = require(\"leaflet\")\n            setL(leaflet)\n        }\n    }, [L])\n\n    return L\n}\n\nexport {\n    Map,\n    MapCircle,\n    MapCircleMarker,\n    MapDefaultMarkerIcon,\n    MapMarker,\n    MapPolygon,\n    MapPolyline,\n    MapPopup,\n    MapRectangle,\n    MapTileLayer,\n    MapZoomControl,\n}\n",
            "type": "registry:ui"
        }
    ]
}
