{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "map",
    "type": "registry:ui",
    "dependencies": ["leaflet", "react-leaflet", "next-themes"],
    "devDependencies": ["@types/leaflet"],
    "registryDependencies": ["button", "skeleton"],
    "files": [
        {
            "path": "registry/new-york-v4/ui/map.tsx",
            "content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/registry/new-york-v4/ui/button\";\nimport { Skeleton } from \"@/registry/new-york-v4/ui/skeleton\";\nimport type { DivIconOptions, LatLngExpression } from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport { LucideProps, MapPinIcon, MinusIcon, PlusIcon } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport dynamic from \"next/dynamic\";\nimport { useEffect, useState, type ReactNode } from \"react\";\nimport { renderToString } from \"react-dom/server\";\nimport type { MapContainerProps, MarkerProps, PopupProps, TileLayerProps } from \"react-leaflet\";\nimport { useMap } from \"react-leaflet\";\n\nconst MapContainer = dynamic(async () => (await import(\"react-leaflet\")).MapContainer, { ssr: false, loading: () => <Skeleton className=\"size-full\" /> });\nconst TileLayer = dynamic(async () => (await import(\"react-leaflet\")).TileLayer, { ssr: false });\nconst Marker = dynamic(async () => (await import(\"react-leaflet\")).Marker, { ssr: false });\nconst Popup = dynamic(async () => (await import(\"react-leaflet\")).Popup, { ssr: false });\n\nfunction Map({ className, ...props }: MapContainerProps & { center: LatLngExpression }) {\n    const INITIAL_ZOOM = 15;\n\n    return <MapContainer zoom={INITIAL_ZOOM} attributionControl={false} zoomControl={false} className={cn(\"size-full rounded-md\", className)} {...props} />;\n}\n\nfunction MapTileLayer({ attribution, url, ...props }: Partial<TileLayerProps>) {\n    const { resolvedTheme } = useTheme();\n    const style = resolvedTheme === \"dark\" ? \"dark_all\" : \"light_all\";\n    const tileUrl = `https://{s}.basemaps.cartocdn.com/${style}/{z}/{x}/{y}.png`;\n\n    return <TileLayer attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>' url={tileUrl} {...props} />;\n}\n\nfunction MapDefaultMarkerIcon({ ...props }: LucideProps) {\n    return <MapPinIcon {...props} />;\n}\n\nfunction MapMarker({ icon, bgPos, iconAnchor, popupAnchor, tooltipAnchor, ...props }: Omit<MarkerProps, \"icon\"> & Pick<DivIconOptions, \"bgPos\" | \"iconAnchor\" | \"popupAnchor\" | \"tooltipAnchor\"> & { icon?: ReactNode }) {\n    const L = useLeaflet();\n    if (!L) return null;\n\n    return (\n        <Marker\n            icon={L.divIcon({\n                html: renderToString(icon ?? <MapDefaultMarkerIcon />),\n                ...(bgPos ? { bgPos } : {}),\n                ...(iconAnchor ? { iconAnchor } : {}),\n                ...(popupAnchor ? { popupAnchor } : {}),\n                ...(tooltipAnchor ? { tooltipAnchor } : {})\n            })}\n            riseOnHover\n            {...props}\n        />\n    );\n}\n\nfunction MapPopup({ className, ...props }: PopupProps) {\n    return <Popup className={cn(\"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 w-72 origin-(--radix-popover-content-transform-origin) rounded-md border p-4 font-sans shadow-md outline-hidden\", className)} {...props} />;\n}\n\nfunction MapZoomControl({ className, ...props }: React.ComponentProps<\"div\">) {\n    const map = useMap();\n    const mapZoom = map.getZoom();\n    const mapMaxZoom = map.getMaxZoom();\n    const mapMinZoom = map.getMinZoom();\n\n    return (\n        <div className={cn(\"absolute top-1 left-1 z-1000 grid gap-1\", className)} {...props}>\n            <Button type=\"button\" size=\"icon\" variant=\"outline\" disabled={mapZoom >= mapMaxZoom} onClick={() => map.zoomIn()}>\n                <PlusIcon />\n            </Button>\n            <Button type=\"button\" size=\"icon\" variant=\"outline\" disabled={mapZoom <= mapMinZoom} onClick={() => map.zoomOut()}>\n                <MinusIcon />\n            </Button>\n        </div>\n    );\n}\n\nfunction useLeaflet() {\n    const [L, setL] = useState<typeof import(\"leaflet\") | null>(null);\n\n    useEffect(() => {\n        if (L) return;\n\n        if (typeof window !== \"undefined\") {\n            const leaflet = require(\"leaflet\");\n            setL(leaflet);\n        }\n    }, [L]);\n\n    return L;\n}\n\nexport { Map, MapDefaultMarkerIcon, MapMarker, MapPopup, MapTileLayer, MapZoomControl };\n",
            "type": "registry:ui"
        }
    ]
}
