/* eslint-disable @typescript-eslint/ban-ts-comment */
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {
  "map": {
    name: "map",
    description: "A map component.",
    type: "registry:ui",
    registryDependencies: ["button","dropdown-menu"],
    files: [{
      path: "registry/new-york-v4/ui/map.tsx",
      type: "registry:ui",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/ui/map.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "basic-map": {
    name: "basic-map",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/basic-map.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/basic-map.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-custom-tiles": {
    name: "map-with-custom-tiles",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-custom-tiles.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-custom-tiles.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-markers": {
    name: "map-with-markers",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-markers.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-markers.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-custom-markers": {
    name: "map-with-custom-markers",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-custom-markers.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-custom-markers.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-circle": {
    name: "map-with-circle",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-circle.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-circle.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-circle-marker": {
    name: "map-with-circle-marker",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-circle-marker.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-circle-marker.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-polyline": {
    name: "map-with-polyline",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-polyline.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-polyline.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-polygon": {
    name: "map-with-polygon",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-polygon.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-polygon.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-rectangle": {
    name: "map-with-rectangle",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-rectangle.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-rectangle.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-styled-shapes": {
    name: "map-with-styled-shapes",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-styled-shapes.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-styled-shapes.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-popups-and-tooltips": {
    name: "map-with-popups-and-tooltips",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-popups-and-tooltips.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-popups-and-tooltips.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-zoom-control": {
    name: "map-with-zoom-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-zoom-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-zoom-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-layers-control": {
    name: "map-with-layers-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-layers-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-layers-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-tile-layers-control": {
    name: "map-with-tile-layers-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-tile-layers-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-tile-layers-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-layer-groups-control": {
    name: "map-with-layer-groups-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-layer-groups-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-layer-groups-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-feature-groups-control": {
    name: "map-with-feature-groups-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-feature-groups-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-feature-groups-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-locate-control": {
    name: "map-with-locate-control",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-locate-control.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-locate-control.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-locate-control-callbacks": {
    name: "map-with-locate-control-callbacks",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-locate-control-callbacks.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-locate-control-callbacks.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-custom-control-position": {
    name: "map-with-custom-control-position",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-custom-control-position.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-custom-control-position.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  "map-with-complex-custom-control-position": {
    name: "map-with-complex-custom-control-position",
    description: "",
    type: "registry:example",
    registryDependencies: ["map"],
    files: [{
      path: "registry/new-york-v4/examples/map-with-complex-custom-control-position.tsx",
      type: "registry:example",
      target: ""
    }],
    component: React.lazy(async () => {
      const mod = await import("@/registry/new-york-v4/examples/map-with-complex-custom-control-position.tsx")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    }),
    categories: undefined,
    meta: undefined,
  },
  }